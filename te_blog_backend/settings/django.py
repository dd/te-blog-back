"""
Django settings for te_blog_backend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

import os
from pathlib import Path

from te_blog_backend.settings import base
from te_blog_backend.settings.environ import BASE_DIR
from te_blog_backend.settings.environ import env


__all__ = [
    "SECRET_KEY",
    "DEBUG",
    "ALLOWED_HOSTS",
    # "CSRF_TRUSTED_ORIGINS",
    "INSTALLED_APPS",
    "MIDDLEWARE",
    "ROOT_URLCONF",
    "TEMPLATES",
    "WSGI_APPLICATION",
    "DATABASES",
    "AUTH_PASSWORD_VALIDATORS",
    "LANGUAGE_CODE",
    "TIME_ZONE",
    "USE_I18N",
    "USE_TZ",
    "DEFAULT_AUTO_FIELD",
    "ADMINS",
    "LOGGING",
]


# Application definition

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list(
    "ALLOWED_HOSTS",
    default=[
        base.SITE_DOMAIN,
        base.API_SITE_DOMAIN,
        base.ADMIN_SITE_DOMAIN,
        base.STATIC_SITE_DOMAIN,
        base.MEDIA_SITE_DOMAIN,
    ],
)

# CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[SITE_URL])

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "rest_framework",
    # "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "te_blog_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "te_blog_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": env.db_url("DATABASE_DEFAULT", default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}")
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = env.str("LANGUAGE_CODE", "ru")

TIME_ZONE = env.str("TIME_ZONE", "Europe/Moscow")

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


ADMINS = (
    (
        env.str("ADMIN_NAME", "Dmitriy Dobrynin"),
        env.str("ADMIN_EMAIL", "dd@tovarisch.engineer"),
    ),
)


# Logging

LOGGER_LEVEL = env.str("LOGGER_LEVEL", "INFO")
LOG_PATH = env.path("LOG_PATH", BASE_DIR / "logs" / "django.log")

if LOG_PATH:
    os.makedirs(Path(LOG_PATH).parent, mode=0o755, exist_ok=True)

try:
    import colorlog
except ImportError:
    colorlog = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "formatters": {
        "default": {
            "format": "[%(asctime)s] %(levelname)-8s %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "full": {
            "format": "[%(asctime)s] %(levelname)-8s %(module)s %(process)d %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "may_be_colored": {
            "()": "colorlog.ColoredFormatter" if colorlog else "django.utils.log.ServerFormatter",
            "format": (
                f"[%(asctime)s] %(levelname)-8s {'%(log_color)s' if colorlog else ''}%(message)s"
            ),
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "handlers": {
        # log for development - collored (if installed colorlog)
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "may_be_colored",
            "level": LOGGER_LEVEL,
        },
        # log for production - mails
        "mail_admins": {
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],
            "formatter": "full",
            "level": "ERROR",
        },
        # log to file
        "file": {
            "level": LOGGER_LEVEL,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOG_PATH,
            "when": "d",
            "formatter": "default",
            "backupCount": 7,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "te_blog": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
